/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Server
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { IceBreakersIndexResponse } from "./api.schemas";
import { rest } from "msw";
import { faker } from "@faker-js/faker";

/**
 * @summary Get icebreakers
 */
export const icebreakersIndex = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<IceBreakersIndexResponse>> => {
  return axios.get(`/api/p/icebreakers`, options);
};

export const getIcebreakersIndexQueryKey = () =>
  [`/api/p/icebreakers`] as const;

export const getIcebreakersIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof icebreakersIndex>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof icebreakersIndex>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof icebreakersIndex>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIcebreakersIndexQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icebreakersIndex>>
  > = ({ signal }) => icebreakersIndex({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type IcebreakersIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof icebreakersIndex>>
>;
export type IcebreakersIndexQueryError = AxiosError<unknown>;

/**
 * @summary Get icebreakers
 */
export const useIcebreakersIndex = <
  TData = Awaited<ReturnType<typeof icebreakersIndex>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof icebreakersIndex>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getIcebreakersIndexQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getIcebreakersIndexMock = () => ({
  icebreakers: faker.helpers.arrayElement([
    Array.from(
      { length: faker.datatype.number({ min: 1, max: 10 }) },
      (_, i) => i + 1
    ).map(() => ({
      question: faker.random.word(),
      description: faker.random.word(),
    })),
    undefined,
  ]),
});

export const getIceBreakersMSW = () => [
  rest.get("*/api/p/icebreakers", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getIcebreakersIndexMock())
    );
  }),
];
