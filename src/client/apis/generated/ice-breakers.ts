/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Server
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { IceBreakersRandomResponse } from "./api.schemas";
import { rest } from "msw";
import { faker } from "@faker-js/faker";

/**
 * @summary Get Random icebreaker
 */
export const icebreakersRandom = (
  options?: AxiosRequestConfig,
): Promise<AxiosResponse<IceBreakersRandomResponse>> => {
  return axios.get(`/api/p/icebreaker`, options);
};

export const getIcebreakersRandomQueryKey = () =>
  [`/api/p/icebreaker`] as const;

export const getIcebreakersRandomQueryOptions = <
  TData = Awaited<ReturnType<typeof icebreakersRandom>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof icebreakersRandom>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<
  Awaited<ReturnType<typeof icebreakersRandom>>,
  TError,
  TData
> & { queryKey: QueryKey } => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getIcebreakersRandomQueryKey();

  const queryFn: QueryFunction<
    Awaited<ReturnType<typeof icebreakersRandom>>
  > = ({ signal }) => icebreakersRandom({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type IcebreakersRandomQueryResult = NonNullable<
  Awaited<ReturnType<typeof icebreakersRandom>>
>;
export type IcebreakersRandomQueryError = AxiosError<unknown>;

/**
 * @summary Get Random icebreaker
 */
export const useIcebreakersRandom = <
  TData = Awaited<ReturnType<typeof icebreakersRandom>>,
  TError = AxiosError<unknown>,
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof icebreakersRandom>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getIcebreakersRandomQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};

export const getIcebreakersRandomMock = () => ({
  icebreaker: faker.helpers.arrayElement([
    { question: faker.random.word(), description: faker.random.word() },
    undefined,
  ]),
});

export const getIceBreakersMSW = () => [
  rest.get("*/api/p/icebreaker", (_req, res, ctx) => {
    return res(
      ctx.delay(1000),
      ctx.status(200, "Mocked status"),
      ctx.json(getIcebreakersRandomMock()),
    );
  }),
];
