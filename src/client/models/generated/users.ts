/**
 * Generated by orval v6.17.0 üç∫
 * Do not edit manually.
 * Server
 * OpenAPI spec version: 1.0
 */
import axios from "axios";
import type { AxiosRequestConfig, AxiosResponse, AxiosError } from "axios";
import { useQuery } from "@tanstack/react-query";
import type {
  UseQueryOptions,
  QueryFunction,
  UseQueryResult,
  QueryKey,
} from "@tanstack/react-query";
import type { UsersIndexResponse } from "./api.schemas";

/**
 * @summary Get users
 */
export const usersIndex = (
  options?: AxiosRequestConfig
): Promise<AxiosResponse<UsersIndexResponse>> => {
  return axios.get(`/api/p/users`, options);
};

export const getUsersIndexQueryKey = () => [`/api/p/users`] as const;

export const getUsersIndexQueryOptions = <
  TData = Awaited<ReturnType<typeof usersIndex>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersIndex>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryOptions<Awaited<ReturnType<typeof usersIndex>>, TError, TData> & {
  queryKey: QueryKey;
} => {
  const { query: queryOptions, axios: axiosOptions } = options ?? {};

  const queryKey = queryOptions?.queryKey ?? getUsersIndexQueryKey();

  const queryFn: QueryFunction<Awaited<ReturnType<typeof usersIndex>>> = ({
    signal,
  }) => usersIndex({ signal, ...axiosOptions });

  return { queryKey, queryFn, ...queryOptions };
};

export type UsersIndexQueryResult = NonNullable<
  Awaited<ReturnType<typeof usersIndex>>
>;
export type UsersIndexQueryError = AxiosError<unknown>;

/**
 * @summary Get users
 */
export const useUsersIndex = <
  TData = Awaited<ReturnType<typeof usersIndex>>,
  TError = AxiosError<unknown>
>(options?: {
  query?: UseQueryOptions<
    Awaited<ReturnType<typeof usersIndex>>,
    TError,
    TData
  >;
  axios?: AxiosRequestConfig;
}): UseQueryResult<TData, TError> & { queryKey: QueryKey } => {
  const queryOptions = getUsersIndexQueryOptions(options);

  const query = useQuery(queryOptions) as UseQueryResult<TData, TError> & {
    queryKey: QueryKey;
  };

  query.queryKey = queryOptions.queryKey;

  return query;
};
